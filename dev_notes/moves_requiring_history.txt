There are a few moves in the game that use past actions to figure out what to
do.  In this document, I list these moves and describe their precise reliance
on the past.

MIRRORMOVE
MM causes the user to use the last move that the target used.
A move called by MM counts as the last move used.
MM fails if:
- target didn't make a move selection in the round before using MM
- switches out during the round MM is used (switch would happen before)
- target's last move was MM
The opponent being paralyzed doesn't change the last move it used
The opponent being confused doesn't change the last move it used
The opponent recharging (HyperBeam) doesn't change the last move it used
The opponent building up (WaitThenAttack) doesn't count as the last move used
If MM is used during the first turn of a multi-turn move, MM ignores that and looks into the past

So here, we just need to track the most recently used attack by each Pokemon.
Switching out removes any registered attack.


BIDE
Bide has priority +1, so it tends to be the first move to go.
For either absorb damage 2-3 times from moves of any Type (that 2-3 includes the turn it goes first on)
Then deal back twice the damage absorbed.
If the user is attacked once, all subsequent non-damaging moves used against Biding Pokemon count as having done the same damage as the previous attack, increasing Bide's final damage.
Deals type-agnostic damage.
Using Bide immediately deducts a PP, whether or not you stick around (tested in ROM)
Unaffected by evasion/accuracy modifiers.
Can damage Pokemon in the invulnerable stage of Dig and Fly.
Sleep, full par, partial trapping, and freeze pause but don't disrupt Bide's duration.
Have the choice to switch out, but switching will negate damage-absorbing (limited control).

So we need a BideManager that a Pokemon will register with.
Pokemon -> (totalDamage, turnsLeft)
def processMoveResult(mr: MoveResult) {
  if defender is SLP, fully PAR, partially trapped, or frozen
    do nothing!
  if (mr.damageDealt > 0)
    update totalDamage for Pokemon p
  else if (mr.numTimesHit == 1)
    // some non-damaging move hit
    lastDamagingMove = CounterManager.lastMoveUsedAgainst(p)
    totalDamage += lastDamagingMove.damageDealt
}

The move Bide will do the following:
- If the Pokemon isn't Biding, pick 2-3 turns and start counting down. Deduct PP here?
- If the Pokemon IS Biding, then decrement the number of turns left. If turnsLeft == 0, return damage to be dealt.
(Be careful about not-doing anything if SLP, PAR, trapped, or FRZ)

Switching tries to remove the switching Pokemon from the Bide manager.



COUNTER
In Gen 1, Counter acts upon the last DAMAGE DEALT to the Pokemon using Counter.
Switching, full paralysis, and using a multi-turn move will not reset the last amount of damage done.
The same damage-receiving can be Countered multiple times, as long as the damage-receiving isn't replaced.
So we need to keep track of, for each Pokemon, the Type and DamageDealt for the last DamageDealt>0 strike.

This is an interesting statement:
"An attack absorbed by a Substitute can be countered for the amount of damage it would have done to the user had the user not had a Substitute."

Let's split this up into some cases, where P1 is the Pokemon Countering and P2 is attacking P1:
1. P1 doesn't have a substitute. 
=> Proceed as usual.
2. P2 deals damage, P1 creates a Substitute, P2 attacks and misses, P1 uses Counter.
=> The substitute didn't absorb any damage, proceed as usual with that first "P2 deals damage."
3. Have Sub, Opponent hits with wrong moveType and hurts Sub.
=> Counter can't do anything with this hit, since it was the wrong Type. Counter will fail here.
4. P1 has 150HP, P1sub has 100HP, Opponent hits with Normal/Fighting attack that deals 85 HP.
=> P1sub has 15HP, Counter can reply with 85*2 damage dealt.

5. P1 has 150HP, P1sub has 100HP, Opponent hits with Normal/Fighting attack that deals 120 HP.
=> Deal 100HP to P1sub, subKO. That attack would have dealt 120HP to P1, though, so can Counter for 120*2.
6. P1 has 10HP, P1sub has 100HP, Opponent hits with Normal/Fighting attack that deals 120 HP.
=> SubKO. That attack would only have dealt 10HP to P1, so P1 can Counter for 10*2?
7. P1 has 10HP, P1sub has 100HP, Opponent hits with Normal/Fighting Multistrike attack: 3 hits, 40DP each.
=> Deal (40, 40, 20) to sub. SubKO. Attack would only have dealt 10HP to P1, so P1 can Counter for 10*2?

---

This suggests that a MoveResult should actually store 3 different kinds of damages:
1. rawDamage  = the raw damage value returned by the damage formula
2. damageDealt = how much damage the last strike dealt to either the sub (if present) or the enemy (if no sub)
               = min(DamageCalc, p1.currentHP(false))
2. dUnderlying = how much damage the last strike would have dealt to the underlying Pokemon, whether or not it has a substitute  
                      == min(DamageCalc, p1.currentHP(true))
BE CAREFUL ABOUT MULTISTRIKE STUFF! LAST STRIKE ONLY!

In Case 4, these values would be (85, 85, 85)
In Case 5, these values would be (120, 100, 120)
In Case 6, these values would be (120, 100, 10)
In Case 7, these values would be (40, 20, 10)

Once these new MoveResults are floating around, we just need to map each Pokemon in the battle
to the last damage-dealing hit they've received.

Q: Where to implement the updating?
A: Pokemon.takeDamage could be really nice, since that's the only way to injure a Pokemon
